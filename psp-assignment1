import random

def display_instructions():
    print('1) You have to enter the size of the grid between 2-8.')
    print('   For example, if the size of the grid is 3:')
    print('2) It will auto-generate a 3x3 grid with 9 random numbers in it.')
    print('3) Below the grid, it will show the initial scores of two players.')
    print('4) The first player will randomly select a number from a row and column.')
    print('5) The chosen number will be added to the scores.')
    print('6) After selecting the numbers, the selected box will turn into either X or blank.')
    print('7) For now, the second player will select a random number only in the same column as the previous player.')
    print('8) The chosen number will be added to the second player\'s scores.')
    print('9) Now, back to the first player, you can only choose the number in the same row as the previous selected number by the second player.')
    print('10) This game alternates between column and row selection.')
    print('11) The game will end if any row or column is fully taken.')
    print('12) The person with the highest score will win the game!')

def display_scores(player1_name, player1_score, player2_name, player2_score):
    print(f"{player1_name}'s Score: {player1_score}")
    print(f"{player2_name}'s Score: {player2_score}")

def get_valid_input(message, options):
    while True:
        user_input = input(message).lower()
        if user_input in options:
            return user_input
        else:
            print('Invalid input. Please enter Y or N.')

def mark_number(grid, row, column):
    number = grid[row][column]
    if number != 'X':
        grid[row][column] = 'X'

def get_row_with_number(grid, number):
    for row in range(len(grid)):
        for column in range(len(grid[row])):
            if grid[row][column] == number:
                return row
    return None

def player1_turn(grid, player1_name, player1_score):
    grid_size = len(grid)

    row = int(input(f"{player1_name}, choose a row (0-{grid_size - 1}): "))

    while not (0 <= row < grid_size):
        print(f"Invalid row. Please choose a row within the valid range (0-{grid_size - 1}).")
        row = int(input(f"{player1_name}, choose a row (0-{grid_size - 1}): "))

    column = int(input(f"{player1_name}, choose a column (0-{grid_size - 1}): "))

    while not (0 <= column < grid_size):
        print(f"Invalid column. Please choose a column within the valid range (0-{grid_size - 1}).")
        column = int(input(f"{player1_name}, choose a column (0-{grid_size - 1}): "))

    selected_number = int(grid[row][column])
    player1_score += selected_number

    print(f"{player1_name} selected the number {selected_number}")
    print(f"{player1_name}'s score: {player1_score}")

    mark_number(grid, row, column)

    for row in grid:
        print('+------' * grid_size + '+')
        print('|', end=' ')
        for cell in row:
            print(f'{cell:^4}', end=' | ')
        print()
    print('+------' * grid_size + '+')

    return player1_score

def player2_turn(grid, player2_name, player2_score):
    grid_size = len(grid)

    print(f"{player2_name}, choose a column (0-{grid_size - 1}): ")

    column = int(input(f"{player2_name}, choose a column (0-{grid_size - 1}): "))

    while not (0 <= column < grid_size):
        print(f"Invalid column. Please choose a column within the valid range (0-{grid_size - 1}).")
        column = int(input(f"{player2_name}, choose a column (0-{grid_size - 1}): "))

    for row in range(grid_size):
        if grid[row][column] != 'X':
            selected_number = int(grid[row][column])
            player2_score += selected_number

            print(f"{player2_name} selected the number {selected_number}")
            print(f"{player2_name}'s score: {player2_score}")

            mark_number(grid, row, column)
            break

    return player2_score

def is_game_over(grid):
    grid_size = len(grid)

    for row in range(grid_size):
        row_complete = all(cell == 'X' for cell in grid[row])
        if row_complete:
            return True

    for col in range(grid_size):
        col_complete = all(grid[row][col] == 'X' for row in range(grid_size))
        if col_complete:
            return True

    return False

def start_game():
    instruction = get_valid_input('Do you need instructions? Y / N: ', ['y', 'n'])

    if instruction == 'y':
        display_instructions()

    question = get_valid_input('Do you want to start the game? Y / N: ', ['y', 'n'])

    if question == 'y':
        grid_size = int(input('Enter the grid size you want: '))

        grid = [[' ' for i in range(grid_size)] for i in range(grid_size)]

        for row in range(grid_size):
            for col in range(grid_size):
                grid[row][col] = str(random.randint(-30, 30))

        # Initialize scores for Player 1 and Player 2
        player1_score = 0
        player2_score = 0

        # Get names of Player 1 and Player 2
        player1_name = input("Enter name for Player 1: ")
        player2_name = input("Enter name for Player 2: ")

        while True:
            for row in grid:
                print('+------' * grid_size + '+')
                print('|', end=' ')
                for cell in row:
                    print(f'{cell:^4}', end=' | ')
                print()
            print('+------' * grid_size + '+')

            # Display player names and scores
            display_scores(player1_name, player1_score, player2_name, player2_score)

            player1_score = player1_turn(grid, player1_name, player1_score)

            if is_game_over(grid):
                break

            for row in grid:
                for i in range(len(row)):
                    if row[i] == 'X':
                        row[i] = 'X'

            for row in grid:
                print('+------' * grid_size + '+')
                print('|', end=' ')
                for cell in row:
                    print(f'{cell:^4}', end=' | ')
                print()
            print('+------' * grid_size + '+')

            player2_score = player2_turn(grid, player2_name, player2_score)

            if is_game_over(grid):
                break

        for row in grid:
            print('+------+------+------+------+')
            print('|', end=' ')
            for cell in row:
                print(f'{cell:^4}', end=' | ')
            print()
        print('+------+------+------+------+')

        if player1_score > player2_score:
            print(f"{player1_name} wins!")
        elif player2_score > player1_score:
            print(f"{player2_name} wins!")
        else:
            print("It's a tie!")

    print()

# Start the game
start_game()
