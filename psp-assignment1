import random

def namename () : #kerqian
    print('--------------------------------------------------------------------')
    print('Course : PSP0101 Problem Solving and Program Design')
    print('Assignement : Crisscross')
    print('Session : T2220')
    print('Lab class code : TL1L')
    print('Group : 2 ')
    print('Name : Beh Ker Qian', 'Student ID : 1221105224')
    print('Phone : 01116821020','Email : 1221105224@student.mmu.edu.my\n')
    print('Group Leader : Yap Shen Yee')
    print('Lab class code : TL1L')
    print('Name : Yap Shen Yee', 'Student ID : 1221104548')
    print('Phone : 0162897881','Email : 1221104548@student.mmu.edu.my')

def display_instructions(): #kerqian
    print('1) You have to enter the size of the grid between 2-8.')
    print('   For example, if the size of the grid is 3:')
    print('2) It will auto-generate a 3x3 grid with 9 random numbers in it.')
    print('3) Below the grid, it will show the initial scores of two players.')
    print('4) The first player will randomly select a number from a row and column.')
    print('5) The chosen number will be added to the scores.')
    print('6) After selecting the numbers, the selected box will turn into either X or blank.')
    print('7) For now, the second player will select a random number only in the same column as the previous player.')
    print('8) The chosen number will be added to the second player\'s scores.')
    print('9) Now, back to the first player, you can only choose the number in the same row as the previous selected number by the second player.')
    print('10) This game alternates between column and row selection.')
    print('11) The game will end if any row or column is fully taken.')
    print('12) The person with the highest score will win the game!')

def display_scores(player1_name, player1_score, player2_name, player2_score): #shenyee
    print(f"{player1_name}'s Score: {player1_score}")
    print(f"{player2_name}'s Score: {player2_score}")

def get_valid_input(message, options): #shenyee
    while True:
        user_input = input(message).lower() 
        if user_input in options:
            return user_input 
        else:
            print('Invalid input. Please enter Y or N.')

def mark_number(grid, row, column): #kerqian
    number = grid[row][column]
    if number != 'X':
        grid[row][column] = 'x'

def get_row_with_number(grid, number): #kerqian
    for row in range(len(grid)):
        for column in range(len(grid[row])):
            if grid[row][column] == number:
                return row
    return None

def player2_turn(grid, player2_name, player2_score, fixed_column, grid_size, last_selected): #kerqian
    print(f"{player2_name}, it's your turn.")
    if last_selected == 'row':
        while True:
            row_input = input(f"{player2_name}, choose a row (a-{chr(ord('a') + len(grid) - 1)}): ")
            row = ord(row_input.lower()) - ord('a')
            if 0 <= row < grid_size:
                if grid[row][fixed_column] != 'x':
                    selected_cell = int(grid[row][fixed_column])
                    try:
                        selected_number = int(selected_cell) 
                        break
                    except ValueError: 
                        print('Invalid number. Please try again.')
                else:
                    print("That position is already taken. Please try again.")
            else:
                print("Invalid row. Please try again.") 
    
    player2_score += selected_number 

    print(f"{player2_name} selected the number {selected_number}")
    print(f"{player2_name}'s score: {player2_score}")
    mark_number(grid, row, fixed_column) 
    return row, player2_score 

def player1_turn(grid, player1_name, player1_score, fixed_row, grid_size, last_selected): #kerqian
    print(f"{player1_name}, it's your turn.")

    if last_selected == 'column': 
        while True:  
            column_input = input(f"{player1_name}, choose a column (1-{grid_size}): ")
            column = int(column_input) - 1
            if 0 <= column < grid_size:
                if grid[fixed_row][column] != 'x':
                    selected_cell = int(grid[fixed_row][column])
                    try:
                        selected_number = int(selected_cell)
                        break
                    except ValueError:
                        print('Invalid number. Please try again.')
                else:
                    print("That position is already taken. Please try again.")
            else:
                print("Invalid column. Please try again.")
    player1_score += selected_number
    print(f"{player1_name} selected the number {selected_number}")
    print(f"{player1_name}'s score: {player1_score}")

    mark_number(grid, fixed_row, column)
    return column, player1_score


def is_game_over(grid): #shenyee
    grid_size = len(grid)
    for row in grid:
        row_complete = all(cell == 'x' for cell in row)
        if row_complete:
            return True

    for col in range(grid_size):
        col_complete = all(grid[row][col] == 'x' for row in range(grid_size))
        if col_complete:
            return True
    return False

def print_grid(grid_size, grid): #shenyee
    i = 1
    a = 97
    print("  ", end="")
    for x in range(grid_size):
        print(f" {i:^5}", end="")
        i += 1
    print(' ')
    print("  ", end="")
    print('-' * ((grid_size * 6) + 1))
    for rows in grid:
        print(f"{chr(a)} ", end="")
        a += 1
        for cols in rows:
            print(f"|{cols:^5}", end="")
        print("|")
        print("  ", end='')
        print('-' * ((grid_size * 6) + 1))

def initialise_game(grid, grid_size): #shenyee
    p1 = 0
    p2 = 0
    random_rows = random.randint(0, grid_size - 1)
    random_cols = random. randint(0, grid_size - 1)
    p1 += grid[random_rows][random_cols] 
    grid[random_rows][random_cols] = 'x'
    return grid, p1, p2, random_cols

def start_game(): #shenyee , kerqian

    namename()

    while True:
        global last_row

        instruction = get_valid_input('Do you need instructions? Y / N: ', ['y', 'n'])

        if instruction == 'y':
            display_instructions()

        question = get_valid_input('Do you want to start the game? Y / N: ', ['y', 'n'])

        if question == 'y':
            grid_size = int(input('Enter the grid size you want: '))

            grid = [[random.randint(-30, 30) for _ in range(grid_size)] for _ in range(grid_size)]
            col_width = max(len(str(cell)) for row in grid for cell in row)
            col, row = grid_size, grid_size


            print_grid(grid_size, grid)

            player1_name = input("Enter name for Player 1: ")
            player2_name = input("Enter name for Player 2: ")
            grid, player1_score, player2_score, fixed_column = initialise_game(grid, grid_size)
            print_grid(grid_size, grid)

            last_selected = 'row'


            while True:
                display_scores(player1_name, player1_score, player2_name, player2_score)

                if last_selected == 'column':
                    fixed_column, player1_score = player1_turn(grid, player1_name, player1_score, fixed_row, grid_size, last_selected)
                    last_selected = 'row'
                else:
                    fixed_row, player2_score = player2_turn(grid, player2_name, player2_score, fixed_column, grid_size, last_selected)
                    last_selected = 'column'

                if is_game_over(grid):
                    break

                print_grid(grid_size, grid)

            for row in grid:
                print('+', end='')
                for _ in range(col_width + 3):
                    print('-', end='')
                print('+', end='')
            print()

            if player1_score > player2_score:
                print(f"{player1_name} wins!")
            elif player2_score > player1_score:
                print(f"{player2_name} wins!")
            else:
                print("It's a tie!")

        print()

        if not play_again():
            print('Thank you for playing!')
            break

def play_again(): #shenyee
    while True:
        choice = get_valid_input('Do you want to play again? Y/N: ',['y','n'])
        if choice == 'y':
            return True
        elif choice == 'n':
            return False

start_game()
