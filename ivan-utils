import random
from utils import *
import sys

def instructions_1():
    print('*' * len("Ps: You can enter different numbers of Rows and Columns"))
    print("The Instructions of our game is simple:")
    print("First, enter the grid size")
    print("Ps: You can enter different numbers of Rows and Columns")
    print('*' * len("Ps: You can enter different numbers of Rows and Columns"), '\n')

def instructions_2():
    print('*' * len("This is the grid you and your buddy will be using in the game!"))
    print("This is the grid you and your buddy will be using in the game!")
    print("Player A will be given a random number")
    print("So, it's Player B's turn now!")
    print('*' * len("This is the grid you and your buddy will be using in the game!"), '\n')    
#  ------Generate and Print Array------ #

def gen_arr(cc_arr, rows, cols):
    c_cols = 0
    c_rows = 0
    for acs in range(rows * cols):
        num1 = random.randint(-30, 30)
        cc_arr[c_rows][c_cols] = num1
        if c_rows == len(cc_arr):
            break
        if c_cols > (len(cc_arr[0]) - 2):
            c_rows += 1
            c_cols = 0
            continue
        c_cols += 1 #main
    return(cc_arr)

def print_arr(cc_arr, cols):
    for i in range(1, cols + 1, 1):
        print(f" {i: ^5}", end="")
    print('')
    print("-" * ((cols * 6) + 1))
    i = 97
    for row in cc_arr:
        for num in row:
            print(f"|{num: ^5}", end="")
        print('|', end="")
        print(f"  {chr(i)}")
        print("-" * ((cols * 6) + 1))
        i += 1
    return (cc_arr)
# --------------------------------------------#

# ------Game Algo------
def player_score(player, grid, score):
    score += grid
    if player == 'a':
        print("Player A: ", score, end='')
    else:
        print("\tPlayer B: ", score)
        print(' ')
    return score

def score_init(score1, score2):
    score1 = player_score('a', 0, score1)
    score2 = player_score('b', 0, score2)

def game_init(grid, rows, cols):
    score1 = 0
    score2 = 0
    randrows = random.randint(0, rows - 1)
    randcols = random.randint(0, cols - 1)
    tmp = grid[randrows][randcols]
    grid[randrows][randcols] = 'x'
    print_arr(grid, cols)
    score1 = player_score('a', tmp, score1)
    score2 = player_score('b', 0, score2)
    return randcols, score1, score2

def game_start(grid, p_num, fixed, score1, score2, columm):
    if p_num % 2 != 0: #player1
        print("| Player A's Turn |")
        print('The row is fixed: ', chr(96 + fixed + 1))
        while 1:
            try:
                cols = int(input("Enter the COLUMN you want: "))
                break
            except ValueError:
                print ("Enter only integer.")
                continue
        if check_input_error(grid[fixed][cols - 1]) == -1:
            return(fixed, 1, score1, score2)
        tmp = grid[fixed][cols - 1]
        grid[fixed][cols - 1] = 'x'
        score1 += tmp
        undo = str(input("Do you want to undo your selection (Y/N): ")) #undo action
        if undo == 'Y':
            grid[fixed][cols - 1] = tmp
            score1 -= tmp
            return(fixed, 1, score1, score2) #
        return ((cols - 1), -1, score1, score2)


    if p_num % 2 == 0: #player2
        print("| Player B's Turn |")
        print('The column is fixed: ', fixed + 1)
        while 1:
            try:
                rows = str(input("Enter the ROW you want: "))
                break
            except ValueError:
                print ("Enter only an alphabet.")
                continue
        rows = ord(rows) - 96
        if check_input_error(grid[rows - 1][fixed]) == -1:
            return(fixed, 1, score1, score2)
        tmp = grid[rows - 1][fixed]
        grid[rows - 1][fixed] = 'x'
        score2 += tmp
        undo = str(input("Do you want to undo your selection (Y/N): ")) #undo action
        if undo == 'Y':
            grid[rows - 1][fixed] = tmp
            score2 -= tmp
            return(fixed, 1, score1, score2) #
        return ((rows - 1), -1, score1, score2)
    

def print_score(score1, score2):
        print("Player A: ", score1, end='')
        print("\tPlayer B: ", score2)
        print(' ')
# ---------------------------------------------------------------- #

# ------Check if game ends------ #

def check_row(grid, g_num, res):
    if str(res) == 'True':
        return res
    tmp_grid = []
    if g_num < len(grid[0]):
        for row in grid:
            tmp_grid.append(row[g_num])
        res = all(isinstance(sub, type('x')) for sub in tmp_grid)
        if str(res) == 'True':
            return res
        res = check_row(grid, g_num + 1, res)
    return res

def check_column(grid):
    for row in grid:
        res = all(isinstance(sub, type('x')) for sub in row)
        if str(res) == 'True':
            return res
    return res

def check_input_error(grid):
    if grid == 'x': # This IF statement checks if user input is repeated/chosen 
            print(' ')
            print("The number has been choosen. Please try again!")
            print('-' * len("The number has been choosen. Please try again!"))
            return(-1)
# ----------------------------------------------------------------- #       
# WARNING: This is just to remind players to type in the correct data type! To see trace, please comment this! #
def my_except_hook(exctype, value, traceback): 
        print('-' * len('Are you stupid?! Enter the correct data type, dumbass!'))
        print('Are you stupid?! Enter the correct data type, dumbass!')
        print('-' * len('Are you stupid?! Enter the correct data type, dumbass!'))
sys.excepthook = my_except_hook
